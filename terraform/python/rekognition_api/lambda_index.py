# -*- coding: utf-8 -*-
# pylint: disable=R0911,R0912,W0718
"""
written by: Lawrence McDaniel
            https://lawrencemcdaniel.com/

date:       sep-2023

Rekognition.index_faces():
https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rekognition/client/index_faces.html

Detects faces in the input image and adds them to the specified collection.
Amazon Rekognition doesnâ€™t save the actual faces that are detected.
Instead, the underlying detection algorithm first detects the faces
in the input image. For each face, the algorithm extracts facial
features into a feature vector, and stores it in the backend database.
Amazon Rekognition uses feature vectors when it performs face match
and search operations using the SearchFaces and SearchFacesByImage operations.

- To get the number of faces in a collection, call DescribeCollection.

- If you provide the optional ExternalImageId for the input image you provided,
    Amazon Rekognition associates this ID with all faces that it detects.
    When you call the ListFaces operation, the response returns the external ID.

- The input image is passed either as base64-encoded image bytes,
    or as a reference to an image in an Amazon S3 bucket.

Facial recognition analysis and indexing of images. Invoked by S3.

AWS Lambda to process image files uploaded to S3.
1.) analyze image file with Rekognition.index_faces() to generate
    'faceprints' of all faces found in the image

2.) index each 'faceprint' by persisting it to DynamoDB

returns: a JSON HTTP response object.

Note that this Lambda is invoked by an S3 'put' event, and as of sep-2023
the response goes undetected by S3. I'm hopeful that the http response
object might become useful in the future if for example, S3 begins
detecting and forwarding these downstream to API Gateway.
"""

# python stuff
import json  # library for interacting with JSON data https://www.json.org/json-en.html
import logging  # library for interacting with application log data
from decimal import (  # Python Decimal data type, for type casting JSON return data https://docs.python.org/3/library/decimal.html
    Decimal,
)
from urllib.parse import (  # to 'de-escape' string representations of URL values
    unquote_plus,
)

# our stuff
from rekognition_api.common import (
    cloudwatch_handler,
    exception_response_factory,
    http_response_factory,
)
from rekognition_api.conf import settings
from rekognition_api.exceptions import EXCEPTION_MAP, RekognitionIlligalInvocationError


# vanity stuff to reduce the verbosity of superfluous log data generated by urllib3
urllib3_logger = logging.getLogger("urllib3")
urllib3_logger.setLevel(logging.CRITICAL)


def get_records(event):
    """returns the event records"""
    return event["Records"]


def get_bucket_name(event):
    """returns the bucket name from the event record"""
    records = get_records(event)
    return records[0]["s3"]["bucket"]["name"]


def validate_event(event):
    """
    This Lambda is supposed to be invoked by S3 'ObjectCreated:Put' events.
    however, nothing prevents it from being invoked for any other reason.

    So, we add some basic business rule enforcement to ensure that the contents of the
    'event' variable match what we are expecting.
    ---------------------------
    """
    try:
        if not isinstance(event, dict):
            raise TypeError("event object is not a dictionary")

        if "Records" not in event:
            raise TypeError("Records object not found in event dict")

        records = event.get("Records")

        if records[0]["eventSource"] != "aws:s3":
            service = records[0]["eventSource"]
            msg = f"lambda_index() is intended to be called from aws:s3, but was invoked by {service}"
            raise RekognitionIlligalInvocationError(msg)

        if "bucket" not in records[0]["s3"]:
            raise TypeError("bucket not found in event object")

        if records[0]["eventName"] != "ObjectCreated:Put":
            event = records[0]["eventName"]
            msg = f"lambda_index() is intended to be called for ObjectCreated:Put event, but was invoked by {event}"
            raise RekognitionIlligalInvocationError(msg)

    except (KeyError, TypeError, RekognitionIlligalInvocationError) as e:
        return http_response_factory(status_code=500, body=exception_response_factory(e))
    return True


def unpack_s3_object(event, record):
    """extracts the s3 object key, object, and object metadata from the event record"""
    s3_bucket_name = get_bucket_name(event)
    s3_object_key = unquote_plus(record["s3"]["object"]["key"], encoding="utf-8")
    s3_object = settings.s3_client.Object(s3_bucket_name, s3_object_key)
    s3_object_metadata = {key.replace("x-amz-meta-", ""): s3_object.metadata[key] for key in s3_object.metadata.keys()}
    return s3_object_key, s3_object_metadata


def get_faces(event, record):
    """returns a list of faces found in the image"""
    s3_bucket_name = get_bucket_name(event)
    s3_object_key, _ = unpack_s3_object(event, record)

    faces = {"FaceRecords": []}
    try:
        faces = settings.rekognition_client.index_faces(
            CollectionId=settings.aws_rekognition_collection_id,
            Image={"S3Object": {"Bucket": s3_bucket_name, "Name": s3_object_key}},
            ExternalImageId=s3_object_key,
            DetectionAttributes=[settings.aws_rekognition_face_detect_attributes],
            MaxFaces=settings.aws_rekognition_face_detect_max_faces_count,
            QualityFilter=settings.aws_rekognition_face_detect_quality_filter,
        )

    # handle anything that went wrong
    # see https://docs.aws.amazon.com/rekognition/latest/dg/error-handling.html
    except settings.rekognition_client.exceptions.InvalidParameterException:
        # If no faces are detected in the image, then index_faces()
        # returns an InvalidParameterException error
        pass

    except Exception as e:
        status_code, _message = EXCEPTION_MAP.get(type(e), (500, "Internal server error"))
        return http_response_factory(status_code=status_code, body=exception_response_factory(e))

    return faces


def persist_faceprints(event, record, faces):
    """
    Iterate the FaceRecords list, adding each face to DynamoDB table.
    Note: see the return JSON structure in doc/rekognition_index_faces.json
    """
    s3_bucket_name = get_bucket_name(event)
    s3_object_key, s3_object_metadata = unpack_s3_object(event, record)

    for face in faces["FaceRecords"]:
        face = face["Face"]
        face["bucket"] = s3_bucket_name
        face["key"] = s3_object_key
        face["metadata"] = s3_object_metadata
        face = json.loads(json.dumps(face), parse_float=Decimal)
        settings.dynamodb_table.put_item(Item=face)


def log_event_record(record):
    """log the event record"""
    if settings.debug_mode:
        print(json.dumps({"event_record": record}))


# pylint: disable=unused-argument
def lambda_handler(event, context):  # noqa: C901
    """Lambda entry point"""

    cloudwatch_handler(event)
    validate_event(event)
    records = get_records(event)
    for record in records:
        log_event_record(record)
        faces = get_faces(event, record)
        persist_faceprints(event, record, faces)
        return http_response_factory(status_code=200, body=faces)
